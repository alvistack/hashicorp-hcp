// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hashicorp/hcp/internal/pkg/api/releasesapi/models"
)

// GetReleaseV1Reader is a Reader for the GetReleaseV1 structure.
type GetReleaseV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReleaseV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReleaseV1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetReleaseV1Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetReleaseV1OK creates a GetReleaseV1OK with default headers values
func NewGetReleaseV1OK() *GetReleaseV1OK {
	return &GetReleaseV1OK{}
}

/*
GetReleaseV1OK describes a response with status code 200, with default header values.

OK (releases retrieved)
*/
type GetReleaseV1OK struct {

	/* The ETag for this release metadata
	 */
	ETag string

	Payload *models.ProductReleaseResponseV1
}

// IsSuccess returns true when this get release v1 o k response has a 2xx status code
func (o *GetReleaseV1OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get release v1 o k response has a 3xx status code
func (o *GetReleaseV1OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release v1 o k response has a 4xx status code
func (o *GetReleaseV1OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get release v1 o k response has a 5xx status code
func (o *GetReleaseV1OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get release v1 o k response a status code equal to that given
func (o *GetReleaseV1OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get release v1 o k response
func (o *GetReleaseV1OK) Code() int {
	return 200
}

func (o *GetReleaseV1OK) Error() string {
	return fmt.Sprintf("[GET /v1/releases/{product}/{version}][%d] getReleaseV1OK  %+v", 200, o.Payload)
}

func (o *GetReleaseV1OK) String() string {
	return fmt.Sprintf("[GET /v1/releases/{product}/{version}][%d] getReleaseV1OK  %+v", 200, o.Payload)
}

func (o *GetReleaseV1OK) GetPayload() *models.ProductReleaseResponseV1 {
	return o.Payload
}

func (o *GetReleaseV1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header ETag
	hdrETag := response.GetHeader("ETag")

	if hdrETag != "" {
		o.ETag = hdrETag
	}

	o.Payload = new(models.ProductReleaseResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseV1Default creates a GetReleaseV1Default with default headers values
func NewGetReleaseV1Default(code int) *GetReleaseV1Default {
	return &GetReleaseV1Default{
		_statusCode: code,
	}
}

/*
GetReleaseV1Default describes a response with status code -1, with default header values.

an error condition
*/
type GetReleaseV1Default struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this get release v1 default response has a 2xx status code
func (o *GetReleaseV1Default) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get release v1 default response has a 3xx status code
func (o *GetReleaseV1Default) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get release v1 default response has a 4xx status code
func (o *GetReleaseV1Default) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get release v1 default response has a 5xx status code
func (o *GetReleaseV1Default) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get release v1 default response a status code equal to that given
func (o *GetReleaseV1Default) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get release v1 default response
func (o *GetReleaseV1Default) Code() int {
	return o._statusCode
}

func (o *GetReleaseV1Default) Error() string {
	return fmt.Sprintf("[GET /v1/releases/{product}/{version}][%d] getReleaseV1 default  %+v", o._statusCode, o.Payload)
}

func (o *GetReleaseV1Default) String() string {
	return fmt.Sprintf("[GET /v1/releases/{product}/{version}][%d] getReleaseV1 default  %+v", o._statusCode, o.Payload)
}

func (o *GetReleaseV1Default) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetReleaseV1Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
