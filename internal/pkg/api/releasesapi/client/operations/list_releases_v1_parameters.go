// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListReleasesV1Params creates a new ListReleasesV1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListReleasesV1Params() *ListReleasesV1Params {
	return &ListReleasesV1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewListReleasesV1ParamsWithTimeout creates a new ListReleasesV1Params object
// with the ability to set a timeout on a request.
func NewListReleasesV1ParamsWithTimeout(timeout time.Duration) *ListReleasesV1Params {
	return &ListReleasesV1Params{
		timeout: timeout,
	}
}

// NewListReleasesV1ParamsWithContext creates a new ListReleasesV1Params object
// with the ability to set a context for a request.
func NewListReleasesV1ParamsWithContext(ctx context.Context) *ListReleasesV1Params {
	return &ListReleasesV1Params{
		Context: ctx,
	}
}

// NewListReleasesV1ParamsWithHTTPClient creates a new ListReleasesV1Params object
// with the ability to set a custom HTTPClient for a request.
func NewListReleasesV1ParamsWithHTTPClient(client *http.Client) *ListReleasesV1Params {
	return &ListReleasesV1Params{
		HTTPClient: client,
	}
}

/*
ListReleasesV1Params contains all the parameters to send to the API endpoint

	for the list releases v1 operation.

	Typically these are written to a http.Request.
*/
type ListReleasesV1Params struct {

	/* After.

	     This timestamp is used as a pagination marker, indicating that only releases that occurred
	prior to it should be retrieved. When fetching subsequent pages, this parameter should be
	set to the creation timestamp of the oldest release listed on the current page.


	     Format: date-time
	*/
	After *strfmt.DateTime

	/* LicenseClass.

	     If specified, only releases with a matching license class will be returned.  For
	example, if set to `enterprise`, only enterprise releases would be returned.

	*/
	LicenseClass *string

	/* Limit.

	     The maximum number of releases requested.  At most 20 releases can be fetched with a
	single request.


	     Default: 10
	*/
	Limit *int64

	/* Product.

	   The product name.
	*/
	Product string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list releases v1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListReleasesV1Params) WithDefaults() *ListReleasesV1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list releases v1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListReleasesV1Params) SetDefaults() {
	var (
		limitDefault = int64(10)
	)

	val := ListReleasesV1Params{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list releases v1 params
func (o *ListReleasesV1Params) WithTimeout(timeout time.Duration) *ListReleasesV1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list releases v1 params
func (o *ListReleasesV1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list releases v1 params
func (o *ListReleasesV1Params) WithContext(ctx context.Context) *ListReleasesV1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list releases v1 params
func (o *ListReleasesV1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list releases v1 params
func (o *ListReleasesV1Params) WithHTTPClient(client *http.Client) *ListReleasesV1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list releases v1 params
func (o *ListReleasesV1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the list releases v1 params
func (o *ListReleasesV1Params) WithAfter(after *strfmt.DateTime) *ListReleasesV1Params {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the list releases v1 params
func (o *ListReleasesV1Params) SetAfter(after *strfmt.DateTime) {
	o.After = after
}

// WithLicenseClass adds the licenseClass to the list releases v1 params
func (o *ListReleasesV1Params) WithLicenseClass(licenseClass *string) *ListReleasesV1Params {
	o.SetLicenseClass(licenseClass)
	return o
}

// SetLicenseClass adds the licenseClass to the list releases v1 params
func (o *ListReleasesV1Params) SetLicenseClass(licenseClass *string) {
	o.LicenseClass = licenseClass
}

// WithLimit adds the limit to the list releases v1 params
func (o *ListReleasesV1Params) WithLimit(limit *int64) *ListReleasesV1Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list releases v1 params
func (o *ListReleasesV1Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithProduct adds the product to the list releases v1 params
func (o *ListReleasesV1Params) WithProduct(product string) *ListReleasesV1Params {
	o.SetProduct(product)
	return o
}

// SetProduct adds the product to the list releases v1 params
func (o *ListReleasesV1Params) SetProduct(product string) {
	o.Product = product
}

// WriteToRequest writes these params to a swagger request
func (o *ListReleasesV1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter strfmt.DateTime

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter.String()
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.LicenseClass != nil {

		// query param license_class
		var qrLicenseClass string

		if o.LicenseClass != nil {
			qrLicenseClass = *o.LicenseClass
		}
		qLicenseClass := qrLicenseClass
		if qLicenseClass != "" {

			if err := r.SetQueryParam("license_class", qLicenseClass); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// path param product
	if err := r.SetPathParam("product", o.Product); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
