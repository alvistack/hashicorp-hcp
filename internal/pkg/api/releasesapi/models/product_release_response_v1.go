// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductReleaseResponseV1 All metadata for a single product release
//
// swagger:model product_release_response_v1
type ProductReleaseResponseV1 struct {

	// builds
	Builds []*BuildArtifactResponseV1 `json:"builds"`

	// A docker image name and tag for this release in the format `name`:`tag`
	// Example: consul-enterprise:1.10
	DockerNameTag string `json:"docker_name_tag,omitempty"`

	// True if and only if this product release is a prerelease.
	// Example: false
	IsPrerelease bool `json:"is_prerelease"`

	// The license class indicates if this is an enterprise product or an open source product.
	// Example: enterprise
	// Enum: [enterprise hcp oss]
	LicenseClass string `json:"license_class,omitempty"`

	// The product name
	// Example: consul
	// Required: true
	Name *string `json:"name"`

	// status
	Status *ReleaseStatus `json:"status,omitempty"`

	// Timestamp at which this product release was created.
	// Example: 2009-11-10T23:00:00Z
	// Format: date-time
	TimestampCreated strfmt.DateTime `json:"timestamp_created,omitempty"`

	// Timestamp when this product release was most recently updated.  This
	// does not consider release status changes, such as when a release
	// transitions from `supported` to `unsupported` status -- that is
	// tracked within the release status.
	//
	// Example: 2009-11-10T23:00:00Z
	// Format: date-time
	TimestampUpdated strfmt.DateTime `json:"timestamp_updated,omitempty"`

	// URL for a blog post announcing this release; Note that patch releases
	// typically are not announced on the blog, so this may refer to a major
	// or minor parent release.
	//
	// Example: https://www.hashicorp.com/blog/announcing-consul-1-10
	URLBlogpost string `json:"url_blogpost,omitempty"`

	// URL for the changelog covering this release
	// Example: https://github.com/hashicorp/consul/blob/main/CHANGELOG.md#1100-june-22-2021
	URLChangelog string `json:"url_changelog,omitempty"`

	// URL for this product's docker image(s) on DockerHub
	// Example: docker.io/hashicorp/consul-enterprise:1.10
	URLDockerRegistryDockerhub string `json:"url_docker_registry_dockerhub,omitempty"`

	// URL for this product's docker image(s) on Amazon ECR-Public
	// Example: public.ecr.aws/hashicorp/consul-enterprise:1.10
	URLDockerRegistryEcr string `json:"url_docker_registry_ecr,omitempty"`

	// URL for the software license applicable to this release
	// Example: https://github.com/hashicorp/consul/blob/main/LICENSE
	URLLicense string `json:"url_license,omitempty"`

	// The project's website URL
	// Example: https://www.consul.io/docs/enterprise
	URLProjectWebsite string `json:"url_project_website,omitempty"`

	// URL for this release's change notes
	// Example: https://www.consul.io/docs/release-notes/1-10-0
	URLReleaseNotes string `json:"url_release_notes,omitempty"`

	// URL for this release's file containing checksums of all the included build artifacts
	// Example: https://releases.hashicorp.com/consul/1.10.0+ent/consul_1.10.0+ent_SHA256SUMS
	URLShasums string `json:"url_shasums,omitempty"`

	// An array of URLs, each pointing to a signature file.  Each signature file is a detached signature
	// of the checksums file (see field `url_shasums`).  Signature files may or may not embed the signing
	// key ID in the filename.
	//
	// Example: ["https://releases.hashicorp.com/consul/1.10.0+ent/consul_1.10.0+ent_SHA256SUMS.sig","https://releases.hashicorp.com/consul/1.10.0+ent/consul_1.10.0+ent_SHA256SUMS.72D7468F.sig"]
	URLShasumsSignatures []string `json:"url_shasums_signatures"`

	// URL for the product's source code repository.  This field is empty for enterprise products.
	// Example: https://github.com/hashicorp/consul
	URLSourceRepository string `json:"url_source_repository,omitempty"`

	// The version of this release
	// Example: 1.10.0
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this product release response v1
func (m *ProductReleaseResponseV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuilds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestampCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestampUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductReleaseResponseV1) validateBuilds(formats strfmt.Registry) error {
	if swag.IsZero(m.Builds) { // not required
		return nil
	}

	for i := 0; i < len(m.Builds); i++ {
		if swag.IsZero(m.Builds[i]) { // not required
			continue
		}

		if m.Builds[i] != nil {
			if err := m.Builds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("builds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("builds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var productReleaseResponseV1TypeLicenseClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enterprise","hcp","oss"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productReleaseResponseV1TypeLicenseClassPropEnum = append(productReleaseResponseV1TypeLicenseClassPropEnum, v)
	}
}

const (

	// ProductReleaseResponseV1LicenseClassEnterprise captures enum value "enterprise"
	ProductReleaseResponseV1LicenseClassEnterprise string = "enterprise"

	// ProductReleaseResponseV1LicenseClassHcp captures enum value "hcp"
	ProductReleaseResponseV1LicenseClassHcp string = "hcp"

	// ProductReleaseResponseV1LicenseClassOss captures enum value "oss"
	ProductReleaseResponseV1LicenseClassOss string = "oss"
)

// prop value enum
func (m *ProductReleaseResponseV1) validateLicenseClassEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productReleaseResponseV1TypeLicenseClassPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProductReleaseResponseV1) validateLicenseClass(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseClass) { // not required
		return nil
	}

	// value enum
	if err := m.validateLicenseClassEnum("license_class", "body", m.LicenseClass); err != nil {
		return err
	}

	return nil
}

func (m *ProductReleaseResponseV1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ProductReleaseResponseV1) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *ProductReleaseResponseV1) validateTimestampCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.TimestampCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp_created", "body", "date-time", m.TimestampCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductReleaseResponseV1) validateTimestampUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.TimestampUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp_updated", "body", "date-time", m.TimestampUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductReleaseResponseV1) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this product release response v1 based on the context it is used
func (m *ProductReleaseResponseV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuilds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductReleaseResponseV1) contextValidateBuilds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Builds); i++ {

		if m.Builds[i] != nil {

			if swag.IsZero(m.Builds[i]) { // not required
				return nil
			}

			if err := m.Builds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("builds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("builds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductReleaseResponseV1) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductReleaseResponseV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductReleaseResponseV1) UnmarshalBinary(b []byte) error {
	var res ProductReleaseResponseV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
