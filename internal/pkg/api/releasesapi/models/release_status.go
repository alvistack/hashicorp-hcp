// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseStatus Status of the product release
// Example: {"message":"This release is supported","state":"supported"}
//
// swagger:model release_status
type ReleaseStatus struct {

	// Provides information about the most recent change; required when state="withdrawn"
	Message string `json:"message,omitempty"`

	// The state name of the release
	// Enum: [supported unsupported withdrawn]
	State string `json:"state,omitempty"`

	// The timestamp when the release status was last updated
	// Example: 2009-11-10T23:00:00Z
	// Read Only: true
	// Format: date-time
	TimestampUpdated strfmt.DateTime `json:"timestamp_updated,omitempty"`
}

// Validate validates this release status
func (m *ReleaseStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestampUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var releaseStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["supported","unsupported","withdrawn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		releaseStatusTypeStatePropEnum = append(releaseStatusTypeStatePropEnum, v)
	}
}

const (

	// ReleaseStatusStateSupported captures enum value "supported"
	ReleaseStatusStateSupported string = "supported"

	// ReleaseStatusStateUnsupported captures enum value "unsupported"
	ReleaseStatusStateUnsupported string = "unsupported"

	// ReleaseStatusStateWithdrawn captures enum value "withdrawn"
	ReleaseStatusStateWithdrawn string = "withdrawn"
)

// prop value enum
func (m *ReleaseStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, releaseStatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReleaseStatus) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseStatus) validateTimestampUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.TimestampUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp_updated", "body", "date-time", m.TimestampUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this release status based on the context it is used
func (m *ReleaseStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimestampUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseStatus) contextValidateTimestampUpdated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "timestamp_updated", "body", strfmt.DateTime(m.TimestampUpdated)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseStatus) UnmarshalBinary(b []byte) error {
	var res ReleaseStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
